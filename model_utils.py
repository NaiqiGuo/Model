#import opensees.openseespy as ops
import xara
#import openseespy.opensees as ops
import xara.units.iks as units
import math

#——————new import——————
from pathlib import Path
import quakeio
import numpy as np
from mdof.utilities.config import extract_channels
import csv
import os
import matplotlib.pyplot as plt
from mdof.simulate import simulate
from mdof import sysid
from mdof.validation import stabilize_discrete
from mdof.utilities.config import Config

from mdof.utilities.testing import intensity_bounds, truncate_by_bounds

import cvxpy as cp 
import dccp

import pickle
import tqdm

LOAD_EVENTS = False

def ReinforcedRectangle(model, id, h, b, cover, coreID, coverID, steelID, numBars, barArea, nfCoreY, nfCoreZ, nfCoverY, nfCoverZ, GJ):
    r"""
    Define a procedure which generates a rectangular reinforced concrete section
    with one layer of steel evenly distributed around the perimeter and a confined core.

                          y
                          |
                          |
                          |
                ---------------------
                |\                 /|
                | \---------------/ |
                | |               | |
                | |               | |
     z ---------| |               | |  h
                | |               | |
                | |               | |
                | /---------------\ |
                |/                 \|
                ---------------------
                          b

    Arguments
       id - tag for the section that is generated by this procedure
       h - overall height of the section (see above)
       b - overall width of the section (see above)
       cover - thickness of the cover patches
       coreID - material tag for the core patch
       coverID - material tag for the cover patches
       steelID - material tag for the reinforcing steel
       numBars - number of reinforcing bars on any given side of the section
       barArea - cross-sectional area of each reinforcing bar
       nfCoreY - number of fibers in the core patch in the y direction
       nfCoreZ - number of fibers in the core patch in the z direction
       nfCoverY - number of fibers in the cover patches with long sides in the y direction
       nfCoverZ - number of fibers in the cover patches with long sides in the z direction

    Notes
       The thickness of cover concrete is constant on all sides of the core.
       The number of bars is the same on any given side of the section.
       The reinforcing bars are all the same size.
       The number of fibers in the short direction of the cover patches is set to 1.

    Written: Andreas Schellenberg (andreas.schellenberg@gmail.com)
    Date: June 2017
    """

    # The distance from the section z-axis to the edge of the cover concrete
    # in the positive y direction
    coverY = h/2.0

    # The distance from the section y-axis to the edge of the cover concrete
    # in the positive z direction
    coverZ = b/2.0

    # Determine the corresponding values from the respective axes to the
    # edge of the core concrete
    coreY = coverY - cover
    coreZ = coverZ - cover

    # Define the fiber section
    model.section("Fiber", id, GJ=GJ)

    # Define the core patch
    model.patch("quad", coreID, nfCoreZ, nfCoreY, -coreY, coreZ, -coreY, -coreZ, coreY, -coreZ, coreY, coreZ)

    # Define the four cover patches
    model.patch("quad", coverID, 1,        nfCoverY, -coverY,  coverZ, -coreY,   coreZ,   coreY,   coreZ,   coverY,  coverZ)
    model.patch("quad", coverID, 1,        nfCoverY, -coreY,  -coreZ,  -coverY, -coverZ,  coverY, -coverZ,  coreY,  -coreZ)
    model.patch("quad", coverID, nfCoverZ, 1,        -coverY,  coverZ, -coverY, -coverZ, -coreY,  -coreZ,  -coreY,   coreZ)
    model.patch("quad", coverID, nfCoverZ, 1,         coreY,   coreZ,   coreY,  -coreZ,   coverY, -coverZ,  coverY,  coverZ)

    # Define the steel along constant values of y (in the z direction)
    model.layer("straight", steelID, numBars, barArea, -coreY, coreZ, -coreY, -coreZ)
    model.layer("straight", steelID, numBars, barArea,  coreY, coreZ,  coreY, -coreZ)

    # Determine the spacing for the remaining bars in the y direction
    spacingY = (2.0*coreY)/(numBars-1)

    # Avoid double counting bars
    numBars = numBars-2

    # Define remaining steel in the y direction
    model.layer("straight", steelID, numBars, barArea, coreY-spacingY,  coreZ, (-coreY+spacingY),  coreZ)
    model.layer("straight", steelID, numBars, barArea, coreY-spacingY, -coreZ, (-coreY+spacingY), -coreZ)



def create_model(column=None, girder="forceBeamColumn", inputx=None, inputy=None, dt=None):
    if np.all(inputx is None) or np.all(inputy is None) or dt is None:
        raise ValueError("Missing inputx, inputy, or dt. Exiting.")

    if column is None:
        column = "forceBeamColumn"

    # create Model in three-dimensions with 6 DOF/node
    model = xara.Model(ndm=3, ndf=6)

    # Geometry
    # ---------------

    # Set parameters for model geometry
    h  = 144.0;      # Story height
    by = 240.0;      # Bay width in Y-direction
    bx = 240.0;      # Bay width in X-direction

    # Create nodes
    #            tag    X        Y       Z 
    model.node( 1, (-bx/2.0,  by/2.0,   0.0))
    model.node( 2, ( bx/2.0,  by/2.0,   0.0))
    model.node( 3, ( bx/2.0, -by/2.0,   0.0))
    model.node( 4, (-bx/2.0, -by/2.0,   0.0))

    model.node( 5, (-bx/2.0,  by/2.0,     h))
    model.node( 6, ( bx/2.0,  by/2.0,     h))
    model.node( 7, ( bx/2.0, -by/2.0,     h))
    model.node( 8, (-bx/2.0, -by/2.0,     h))

    model.node(10, (-bx/2.0,  by/2.0, 2.0*h))
    model.node(11, ( bx/2.0,  by/2.0, 2.0*h))
    model.node(12, ( bx/2.0, -by/2.0, 2.0*h))
    model.node(13, (-bx/2.0, -by/2.0, 2.0*h))

    model.node(15, (-bx/2.0,  by/2.0, 3.0*h))
    model.node(16, ( bx/2.0,  by/2.0, 3.0*h))
    model.node(17, ( bx/2.0, -by/2.0, 3.0*h))
    model.node(18, (-bx/2.0, -by/2.0, 3.0*h))

    # Retained nodes for rigid diaphragm
    #        tag    ( X    Y    Z   )
    model.node( 9,  (0.0, 0.0,     h))
    model.node(14,  (0.0, 0.0, 2.0*h))
    model.node(19,  (0.0, 0.0, 3.0*h))

    # Set base constraints
    #      tag DX DY DZ RX RY RZ
    model.fix(1, (1, 1, 1, 1, 1, 1))
    model.fix(2, (1, 1, 1, 1, 1, 1))
    model.fix(3, (1, 1, 1, 1, 1, 1))
    model.fix(4, (1, 1, 1, 1, 1, 1))

    # Define rigid diaphragm multi-point constraints
    #              normalDir retained constrained
    model.rigidDiaphragm(3,  9,  5,  6,  7,  8)
    model.rigidDiaphragm(3, 14, 10, 11, 12, 13)
    model.rigidDiaphragm(3, 19, 15, 16, 17, 18)

    # Constraints for rigid diaphragm retained nodes
    #        tag  (DX DY DZ RX RY RZ)
    model.fix( 9, ( 0, 0, 1, 1, 1, 0))
    model.fix(14, ( 0, 0, 1, 1, 1, 0))
    model.fix(19, ( 0, 0, 1, 1, 1, 0))

    # Define materials for nonlinear columns
    # --------------------------------------
    # CONCRETE
    fc = 4.0
    Ec = 57000.0*math.sqrt(fc*1000.0)/1000.0

    # Core concrete (confined)
    #                                 tag  f'c   epsc0  f'cu  epscu
    model.uniaxialMaterial("Concrete01", 1, -5.0, -0.005, -3.5, -0.02)

    # Cover concrete (unconfined)
    #                                 tag  f'c   epsc0  f'cu  epscu
    model.uniaxialMaterial("Concrete01", 2, -fc, -0.002, 0.0, -0.006)

    # STEEL
    fy = 60.0;       # Yield stress
    Es = 30000.0;    # Young's modulus
    # Reinforcing steel 
    #                                tag fy  E0  b
    model.uniaxialMaterial("Steel01", 3, fy, Es, 0.02)

    # Column parameters
    h  = 18.0
    GJ = 1.0E10
    colSec = 1
    beamSec = 2

    # Call the RCsection procedure to generate the column section
    #                              id  h  b cover core cover steel nBars barArea nfCoreY nfCoreZ nfCoverY nfCoverZ GJ
    ReinforcedRectangle(model, colSec, h, h, 2.5, 1,    2,    3,    3,   0.79,     8,      8,      10,      10,   GJ)

    # Define material properties for elastic beams
    # Using beam depth of 24 and width of 18
    Abeam = 18.0*24.0
    # "Cracked" second moments of area
    Ibeamzz = 0.5*1.0/12.0*18.0*pow(24.0,3)
    Ibeamyy = 0.5*1.0/12.0*24.0*pow(18.0,3)

    # Define elastic section for beams
    #                       tag     E    A      Iz       Iy     G    J
    model.section("Elastic", beamSec, Ec, Abeam, Ibeamzz, Ibeamyy, GJ, 1.0)

    # Define column elements
    # ----------------------
    # Geometric transformation for columns
    colTransf = 1
    model.geomTransf("Linear", colTransf, (1.0, 0.0, 0.0))

    # Number of column integration points (sections)
    itg_col = 1
    npts_col = 4
    model.beamIntegration("Lobatto", itg_col, colSec, npts_col)


    #                   tag ndI ndJ transfTag integrationTag
    model.element(column,  1, ( 1,  5), transform=colTransf, section=colSec, shear=0)
    model.element(column,  2, ( 2,  6), transform=colTransf, section=colSec, shear=0)
    model.element(column,  3, ( 3,  7), transform=colTransf, section=colSec, shear=0)
    model.element(column,  4, ( 4,  8), transform=colTransf, section=colSec, shear=0)

    model.element(column,  5, ( 5, 10), transform=colTransf, section=colSec, shear=0)
    model.element(column,  6, ( 6, 11), transform=colTransf, section=colSec, shear=0)
    model.element(column,  7, ( 7, 12), transform=colTransf, section=colSec, shear=0)
    model.element(column,  8, ( 8, 13), transform=colTransf, section=colSec, shear=0)

    model.element(column,  9, (10, 15), transform=colTransf, section=colSec, shear=0)
    model.element(column, 10, (11, 16), transform=colTransf, section=colSec, shear=0)
    model.element(column, 11, (12, 17), transform=colTransf, section=colSec, shear=0)
    model.element(column, 12, (13, 18), transform=colTransf, section=colSec, shear=0)

    # Define beam elements
    # --------------------
    # Geometric transformation for beams
    beamTransf = 2
    model.geomTransf("Linear", beamTransf, 1.0, 1.0, 0.0)


    # Create the beam elements
    #                   tag (ndI ndJ) transfTag integrationTag
    model.element(girder, 13, ( 5,  6), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 14, ( 6,  7), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 15, ( 7,  8), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 16, ( 8,  5), transform=beamTransf, section=beamSec, shear=0)

    model.element(girder, 17, (10, 11), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 18, (11, 12), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 19, (12, 13), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 20, (13, 10), transform=beamTransf, section=beamSec, shear=0)

    model.element(girder, 21, (15, 16), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 22, (16, 17), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 23, (17, 18), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 24, (18, 15), transform=beamTransf, section=beamSec, shear=0)

    # Define gravity loads
    # --------------------
    # Gravity load applied at each corner node
    # 10% of column capacity
    p = 0.1*fc*h*h

    # Mass lumped at retained nodes
    m = (4.0*p)/units.gravity

    # Rotary inertia of floor about retained node
    i = m*(bx*bx + by*by)/12.0

    # Set mass at the retained nodes
    #         tag   MX MY MZ   RX   RY   RZ
    model.mass( 9, (m, m, 0.0, 0.0, 0.0, i))
    model.mass(14, (m, m, 0.0, 0.0, 0.0, i))
    model.mass(19, (m, m, 0.0, 0.0, 0.0, i))

    # Define gravity loads
    # create a Plain load pattern with Constant scaling
    model.pattern("Plain", 1, "Constant")

    for i in [5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18]:
        model.load(i, (0.0, 0.0, -p, 0.0, 0.0, 0.0), pattern=1)

    # set rayleigh damping factors
    model.rayleigh(0.0, 0.0, 0.0, 0.0018)

    # Define earthquake excitation
    # ----------------------------
    # Set up the acceleration records for fault normal (x, dof 1) and fault parallel (y, dof 2)
    model.timeSeries("Path", 2, values=inputx.tolist(), dt=dt, factor=1.0)
    model.timeSeries("Path", 3, values=inputy.tolist(), dt=dt, factor=1.0)

    # Define the excitation using the given ground motion records
    #                         tag dir         accel series args
    model.pattern("UniformExcitation", 2, 1, accel=2)
    model.pattern("UniformExcitation", 3, 2, accel=3)

    return model

def create_frame_model(column=None, girder="forceBeamColumn", inputx=None, inputy=None, dt=None):
    if np.all(inputx is None) or np.all(inputy is None) or dt is None:
        raise ValueError("Missing inputx, inputy, or dt. Exiting.")

    if column is None:
        column = "forceBeamColumn"

    # create Model in three-dimensions with 6 DOF/node
    model = xara.Model(ndm=3, ndf=6)

    # Geometry and Material Properties
        # Nodes(location)
        # Boundary conditions(nodes)
        # Elements(nodes, material properties,                             geometric transformation)
                          # non-fiber section elastic (linear)              # linear
                          # fiber section (linear elastic OR inelastic)     # PDelta
                                                                            # corotational

    # Geometry
    # ---------------

    # Set parameters for model geometry
    h  = 144.0;      # Story height
    by = 240.0;      # Bay width in Y-direction
    bx = 240.0;      # Bay width in X-direction

    # Create nodes
    #            tag    X        Y       Z 
    model.node( 1, (-bx/2.0,  by/2.0,   0.0))
    model.node( 2, ( bx/2.0,  by/2.0,   0.0))
    model.node( 3, ( bx/2.0, -by/2.0,   0.0))
    model.node( 4, (-bx/2.0, -by/2.0,   0.0))

    model.node( 5, (-bx/2.0,  by/2.0,     h))
    model.node( 6, ( bx/2.0,  by/2.0,     h))
    model.node( 7, ( bx/2.0, -by/2.0,     h))
    model.node( 8, (-bx/2.0, -by/2.0,     h))

    model.node(10, (-bx/2.0,  by/2.0, 2.0*h))
    model.node(11, ( bx/2.0,  by/2.0, 2.0*h))
    model.node(12, ( bx/2.0, -by/2.0, 2.0*h))
    model.node(13, (-bx/2.0, -by/2.0, 2.0*h))

    model.node(15, (-bx/2.0,  by/2.0, 3.0*h))
    model.node(16, ( bx/2.0,  by/2.0, 3.0*h))
    model.node(17, ( bx/2.0, -by/2.0, 3.0*h))
    model.node(18, (-bx/2.0, -by/2.0, 3.0*h))


    # Set base constraints
    #      tag DX DY DZ RX RY RZ
    model.fix(1, (1, 1, 1, 1, 1, 1))
    model.fix(2, (1, 1, 1, 1, 1, 1))
    model.fix(3, (1, 1, 1, 1, 1, 1))
    model.fix(4, (1, 1, 1, 1, 1, 1))

    # Define materials for nonlinear columns
    # --------------------------------------
    # CONCRETE
    fc = 4.0
    Ec = 57000.0*math.sqrt(fc*1000.0)/1000.0

    # Core concrete (confined)
    #                                 tag  f'c   epsc0  f'cu  epscu
    model.uniaxialMaterial("Concrete01", 1, -5.0, -0.005, -3.5, -0.02)

    # Cover concrete (unconfined)
    #                                 tag  f'c   epsc0  f'cu  epscu
    model.uniaxialMaterial("Concrete01", 2, -fc, -0.002, 0.0, -0.006)

    # STEEL
    fy = 60.0;       # Yield stress
    Es = 30000.0;    # Young's modulus
    # Reinforcing steel 
    #                                tag fy  E0  b
    model.uniaxialMaterial("Steel01", 3, fy, Es, 0.02)

    # Column parameters
    h  = 18.0
    GJ = 1.0E10
    colSec = 1
    beamSec = 2

    # # Call the RCsection procedure to generate the column section
    # #                              id  h  b cover core cover steel nBars barArea nfCoreY nfCoreZ nfCoverY nfCoverZ GJ
    # ReinforcedRectangle(model, colSec, h, h, 2.5, 1,    2,    3,    3,   0.79,     8,      8,      10,      10,   GJ)
    # Define material properties for elastic columns
    # Using column depth of 24 and width of 18
    Acol = 18.0*24.0
    # "Cracked" second moments of area
    Icolzz = 0.5*1.0/12.0*18.0*pow(24.0,3)
    Icolyy = 0.5*1.0/12.0*24.0*pow(18.0,3)
    # Define elastic section for columns
    #                       tag     E    A      Iz       Iy     G    J
    model.section("Elastic", colSec, Ec, Acol, Icolzz, Icolyy, GJ, 1.0)

    # Define material properties for elastic beams
    # Using beam depth of 24 and width of 18
    Abeam = 18.0*24.0
    # "Cracked" second moments of area
    Ibeamzz = 0.5*1.0/12.0*18.0*pow(24.0,3)
    Ibeamyy = 0.5*1.0/12.0*24.0*pow(18.0,3)

    # Define elastic section for beams
    #                       tag     E    A      Iz       Iy     G    J
    model.section("Elastic", beamSec, Ec, Abeam, Ibeamzz, Ibeamyy, GJ, 1.0)

    # Define column elements
    # ----------------------
    # Geometric transformation for columns
    colTransf = 1
    model.geomTransf("Linear", colTransf, (1.0, 0.0, 0.0))

    # Number of column integration points (sections)
    itg_col = 1
    npts_col = 4
    model.beamIntegration("Lobatto", itg_col, colSec, npts_col)


    #                   tag ndI ndJ transfTag integrationTag
    model.element(column,  1, ( 1,  5), transform=colTransf, section=colSec, shear=0)
    model.element(column,  2, ( 2,  6), transform=colTransf, section=colSec, shear=0)
    model.element(column,  3, ( 3,  7), transform=colTransf, section=colSec, shear=0)
    model.element(column,  4, ( 4,  8), transform=colTransf, section=colSec, shear=0)

    model.element(column,  5, ( 5, 10), transform=colTransf, section=colSec, shear=0)
    model.element(column,  6, ( 6, 11), transform=colTransf, section=colSec, shear=0)
    model.element(column,  7, ( 7, 12), transform=colTransf, section=colSec, shear=0)
    model.element(column,  8, ( 8, 13), transform=colTransf, section=colSec, shear=0)

    model.element(column,  9, (10, 15), transform=colTransf, section=colSec, shear=0)
    model.element(column, 10, (11, 16), transform=colTransf, section=colSec, shear=0)
    model.element(column, 11, (12, 17), transform=colTransf, section=colSec, shear=0)
    model.element(column, 12, (13, 18), transform=colTransf, section=colSec, shear=0)

    # Define beam elements
    # --------------------

    # Geometric transformation for beams
    beamTransf = 2
    model.geomTransf("Linear", beamTransf, 1.0, 1.0, 0.0)


    # Create the beam elements
    #                   tag (ndI ndJ) transfTag integrationTag
    model.element(girder, 13, ( 5,  6), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 14, ( 6,  7), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 15, ( 7,  8), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 16, ( 8,  5), transform=beamTransf, section=beamSec, shear=0)

    model.element(girder, 17, (10, 11), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 18, (11, 12), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 19, (12, 13), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 20, (13, 10), transform=beamTransf, section=beamSec, shear=0)

    model.element(girder, 21, (15, 16), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 22, (16, 17), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 23, (17, 18), transform=beamTransf, section=beamSec, shear=0)
    model.element(girder, 24, (18, 15), transform=beamTransf, section=beamSec, shear=0)

    # Define gravity loads
    # --------------------
    # Gravity load applied at each corner node
    # 10% of column capacity
    p = 0.1*fc*h*h

    # Mass lumped at retained nodes
    m = (4.0*p)/units.gravity

    # Rotary inertia of floor about retained node
    i = m*(bx*bx + by*by)/12.0


    # Set mass at the nodes
    #         tag   MX MY MZ   RX   RY   RZ
    model.mass( 5, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))
    model.mass( 6, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))
    model.mass( 7, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))
    model.mass( 8, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))

    model.mass( 10, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))
    model.mass( 11, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))
    model.mass( 12, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))
    model.mass( 13, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))

    model.mass( 15, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))
    model.mass( 16, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))
    model.mass( 17, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))
    model.mass( 18, (m/4, m/4, 0.0, 0.0, 0.0, 0.0))
    # Define gravity loads
    # create a Plain load pattern with Constant scaling
    model.pattern("Plain", 1, "Constant")

    for i in [5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18]:
        model.load(i, (0.0, 0.0, -p, 0.0, 0.0, 0.0), pattern=1)

    # set rayleigh damping factors
    model.rayleigh(0.0319, 0.0, 0.0125, 0.0)

    # Define earthquake excitation
    # ----------------------------
    # Set up the acceleration records for fault normal (x, dof 1) and fault parallel (y, dof 2)
    model.timeSeries("Path", 2, values=inputx.tolist(), dt=dt, factor=1.0)
    model.timeSeries("Path", 3, values=inputy.tolist(), dt=dt, factor=1.0)

    # Define the excitation using the given ground motion records
    #                         tag dir         accel series args
    model.pattern("UniformExcitation", 2, 1, accel=2)
    model.pattern("UniformExcitation", 3, 2, accel=3)

    return model


def get_inputs(i, events, input_channels, scale=1):
    event = events[i]
    inputs, dt = extract_channels(event, input_channels)
    inputs = scale*inputs
    return inputs, dt


def save_event_io(i, inputs, outputs, dt, out_dir="event_data"):
    os.makedirs(out_dir, exist_ok=True)
    nt = inputs.shape[1]
    time = np.arange(nt) * dt
    
    # —— Save as CSV (readable) —— 
    csv_in = os.path.join(out_dir, f"event_{i+1}_inputs.csv")
    with open(csv_in, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["time","acc_X","acc_Y"])
        for t, x, y in zip(time, inputs[0], inputs[1]):
            writer.writerow([t, x, y])
    
    csv_out = os.path.join(out_dir, f"event_{i+1}_outputs.csv")
    with open(csv_out, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["time","1F_X","1F_Y","2F_X","2F_Y","3F_X","3F_Y"])
        for idx in range(nt):
            row = [time[idx]] + [outputs[r,idx] for r in range(6)]
            writer.writerow(row)
    

def analyze(model, output_nodes, nt, dt):
    # ----------------------------
    # 1. Configure the analysis
    # ----------------------------

    # create the system of equation
    model.system("BandGen")

    # create the DOF numberer
    model.numberer("RCM")

    # create the constraint handler
    model.constraints("Transformation")

    # Configure the analysis such that iterations are performed until either:
    # 1. the energy increment is less than 1.0e-14 (success)
    # 2. the number of iterations surpasses 20 (failure)
    model.test("EnergyIncr", 1.0e-14, 20)

    # Perform iterations with the Newton-Raphson algorithm
    model.algorithm("Newton")

    # define the integration scheme, the Newmark with gamma=0.5 and beta=0.25
    model.integrator("Newmark", 0.5, 0.25)

    # Define the analysis
    model.analysis("Transient")

    # -----------------------
    # 3. Perform the analysis
    # -----------------------

    # record once at time 0
    displacements = {
        node: [model.nodeDisp(node)] for node in output_nodes
    }

    # Perform nt analysis steps with a time step of dt
    print(f"Analysis Progress ({nt} timesteps)")
    for i in tqdm.tqdm(range(nt)):
        status = model.analyze(1, dt) 
        if status != 0:
            raise RuntimeError(f"analysis failed at time {model.getTime()}")

        # Save displacements at the current time
        for node in output_nodes:
            displacements[node].append(model.nodeDisp(node))
           
    return displacements


def get_outputs(displacements):
    """
    displacements: { node_id: [ [u1,u2,u3,u4,u5,u6], ... ] }
    Returns outputs: ndarray, shape=(6, nt), row order:
      [1F X, 1F Y, 2F X, 2F Y, 3F X, 3F Y]
    """
    floors = [9, 14, 19] #[9, 14, 19]  [5, 10, 15]
    rows = []
    for node in floors:
        arr = np.array(displacements[node])  # shape (nt+1, 6)
        rows.append(arr[:, 0])  # X displacement 
        rows.append(arr[:, 1])  # Y displacement
    outputs = np.vstack(rows)
    return outputs     # shape (6, nt+1)


def stabilize_with_lmi(A_hat, epsilon=1e-10, solver='CVXOPT'):

    """
    Only the matrix A_s obtained from algorithms such as SRIM is stabilized by imposing a Lyapunov LMI constraint to obtain a stable A. 
    The matrices B_s, C_s, and D_s are directly used as output. 
    This corresponds to Section II of Lacy & Bernstein (2003).
    The solver can be set to either SCS or CVXOPT, and epsilon can be chosen starting from 1e-8.
    """
    n = A_hat.shape[0]

    # #Define only Q and P as variables
    P = cp.Variable((n, n), PSD=True)
    Q = cp.Variable((n, n))

    # —— Objective function ——— (Equation 2.17)
    objective = cp.Minimize(cp.norm(A_hat @ P - Q, "fro")**2)

    # —— Lyapunov LMI constraint ——— (Equation 2.18)
    M = cp.bmat([
        [P - epsilon * np.eye(n), Q],
        [Q.T, P]
    ])
    constraints = [M >> 0]

    # —— Solve the optimization problem —— 
    prob = cp.Problem(objective, constraints)
    prob.solve(solver=solver)

    A_lmi = Q.value @ np.linalg.inv(P.value)
    return A_lmi


def stabilize_by_radius_clipping(A, alpha=0.995, rmin=None, make_real=True):
    w, V = np.linalg.eig(A)             
    r = np.abs(w)
    w_new = w.copy()
    over = r > 1.0
    w_new[over] = alpha * w[over] / r[over]
    if rmin is not None:
        under = np.abs(w_new) < rmin
        w_new[under] = rmin * w_new[under] / (np.abs(w_new[under]) + 1e-15)
    A_new = V @ np.diag(w_new) @ np.linalg.inv(V)
    if make_real and np.allclose(A_new.imag, 0, atol=1e-10):
        A_new = A_new.real
    return A_new


def get_true_modes_xara(model, floor_nodes=(9,14,19), dofs=(1,2), n=3, solver='-genBandArpack'): #-symmBandLapack -genBandArpack
    lambdas = model.eigen(n)  
    print(f"[Debug] eigen(n={n}) returned {len(lambdas)} values: {lambdas}")
    lambdas = np.asarray(lambdas, dtype=float)
    omega = np.sqrt(np.abs(lambdas))                    # rad/s
    freqs_hz = omega / (2*np.pi)
    rows = []
    for node in floor_nodes:
        for dof in dofs:
            rows.append([model.nodeEigenvector(node, k+1, dof) for k in range(n)])
    Phi_true = np.array(rows, dtype=float)              # (6, nmodes)
    Phi_true /= (np.linalg.norm(Phi_true, axis=0, keepdims=True) + 1e-12)
    idx = np.argsort(freqs_hz)         
    freqs_hz = freqs_hz[idx]
    Phi_true = Phi_true[:, idx]       
    return freqs_hz, Phi_true


def mac_matrix(Phi_true, Phi_est):
    print(type(Phi_est))
    print(np.shape(Phi_est))
    T = Phi_true / (np.linalg.norm(Phi_true, axis=0, keepdims=True) + 1e-12)
    E = Phi_est  / (np.linalg.norm(Phi_est,  axis=0, keepdims=True) + 1e-12)
    return np.abs(T.T @ E)**2     


def normalize_v(v):
    """
    Normalize an individual vector:
    element-wise signed complex magnitude, unitized
    i.e.:
    for each element, multiply the sign of its real part
    by the square root of the element multiplied by its
    complex conjugate.
    then, divide the vector by its Euclidean norm, or the
    square root of the sum of the elements squared.
    """
    vabs = np.abs(v)
    signed_vabs = np.sign(np.real(v)) * vabs
    normed_vabs = signed_vabs / np.linalg.norm(signed_vabs)
    return normed_vabs


def normalize_Psi(Psi):
    """
    Normalize a matrix of complex column vectors using
    `normalize_v` on each vector
    """
    normed_Psi = np.zeros(Psi.shape)
    for i in range(Psi.shape[1]):
        v = Psi[:,i]
        normed_Psi[:,i] = normalize_v(v)
    return normed_Psi


def phi_output(A, C):
    eigvals, U = np.linalg.eig(np.asarray(A, dtype=complex))
    angles = np.abs(np.angle(eigvals))
    idx = np.where(
        (np.abs(eigvals) < 1 - 1e-10) & 
        #(np.abs(eigvals) > 0.05) & 
        (np.imag(eigvals) > -1e-12)&
        (angles > 0.02)
        )[0]
    eigvals_sel = eigvals[idx]
    U_sel = U[:, idx]
    V = C @ U_sel
    Phi = normalize_Psi(V)  
    return Phi, eigvals_sel


def periods_from_A(A, dt):
    eigvals = np.linalg.eigvals(A)
    idx = np.abs(eigvals) < 1.0 
    eigvals = eigvals[idx]
    omega = np.abs(np.angle(eigvals)) / dt  # rad/s
    freqs = omega / (2 * np.pi)
    periods = 1 / freqs
    return np.sort(periods)


def save_all_methods_to_csv(i, methods_dict):
    """
    methods_dict: {'srim': (A,B,C,D), 'n4sid': (A,B,C,D), ...}
    """
    out_dir = "event_outputs_ABCD"
    os.makedirs(out_dir, exist_ok=True)
    filename = os.path.join(out_dir, f"event_modes_{i+1:02d}.csv")
    with open(filename, "w") as f:
        for method, (A, B, C, D) in methods_dict.items():
            for matrix_name, M in zip(['A','B','C','D'], [A, B, C, D]):
                f.write(f"# {method.upper()}-{matrix_name}\n")
                np.savetxt(f, M, delimiter=",", fmt="%.8e")
                f.write("\n")  # Add an empty line for readability
    print(f"Saved all system matrices for event {i+1} to {filename}")


def save_event_modes_to_csv(event_id, Phi_true, method_modes, method_macs, algos, filename):
    # method_modes: {'srim': Phi_srim, ...}  每个方法的Phi, shape=(dof, n_modes)
    # method_macs:  {'srim': MAC_srim, ...}  每个方法的MAC,  shape=(n_modes, n_modes)
    with open(filename, "w", newline='') as f:
        writer = csv.writer(f)
        writer.writerow([f"Event {event_id} True Mode Shapes"])
        for i in range(Phi_true.shape[1]):
            writer.writerow([f"True Mode {i+1}"] + list(Phi_true[:, i]))

        for algo in algos:
            writer.writerow([f"{algo.upper()} Mode Shapes"])
            Phi = method_modes[algo]
            for i in range(Phi.shape[1]):
                writer.writerow([f"{algo.upper()} Mode {i+1}"] + list(Phi[:, i]))

        for algo in algos:
            writer.writerow([f"{algo.upper()} MAC vs True"])
            MAC = method_macs[algo]
            for row in MAC:
                writer.writerow([""] + list(row))
        
        writer.writerow([])  